services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    environment:
      NODE_ENV: development
      ROUTE_PREPEND: jiran-tetangga
      HOSTNAME: apidev
      API_VERSION: ${API_VERSION}
      APP_VERSION: ${APP_VERSION}
      VERSION: ${VERSION}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      PORT: ${PORT}
      INFISICAL_URI: http://infisical-backend:8080
      INFISICAL_PROJECT_ID: 'fda68948-69af-413d-8c54-e96c4c9822df'
      INFISICAL_CLIENT_ID: 'bd1ac894-87d1-4fda-88a7-c68f21a87582'
      INFISICAL_CLIENT_SECRET: '73a23d6683f14ac1444c230b7e72be42c247373cc4ed331be7605d2b1f2dd7b7'
      INFISICAL_ENV: dev
    command: ["npm", "start"]
    ports:
      - "3500:3500"
    networks:
      - jiran-tetangga-networks
    depends_on:
      mongodb:
        condition: service_healthy
    restart: on-failure
    
  mongodb:
    image: mongo:noble
    container_name: mongodb
    restart: always
    volumes:
      - db_data:/data/db
    ports:
      - "27019:27017"
    networks:
      - jiran-tetangga-networks
    healthcheck:
      test: ["CMD", "mongosh" ,"--eval", "db.adminCommand({ping: 1})", "--quiet"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  nginx:
    container_name: nginx
    image: nginx:stable-perl
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "8080:8080"
    depends_on:
      - backend
    networks:
      - jiran-tetangga-networks

networks:
  jiran-tetangga-networks:
    external: true
    name: jiran-tetangga-networks

volumes:
  db_data: